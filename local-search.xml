<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构-考研知识点</title>
    <link href="/2020/04/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E8%80%83%E7%A0%94%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2020/04/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E8%80%83%E7%A0%94%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/04/27/Jh9yIH.png" srcset="/img/loading.gif" alt="Jh9yIH.png"></p><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><h2 id="1-1-数据结构的基本概念"><a href="#1-1-数据结构的基本概念" class="headerlink" title="1.1 数据结构的基本概念"></a>1.1 数据结构的基本概念</h2><h3 id="1-1-1-基本概念和术语"><a href="#1-1-1-基本概念和术语" class="headerlink" title="1.1.1 基本概念和术语"></a>1.1.1 基本概念和术语</h3><h4 id="1-数据"><a href="#1-数据" class="headerlink" title="1. 数据"></a>1. 数据</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</p><h4 id="2-数据元素"><a href="#2-数据元素" class="headerlink" title="2. 数据元素"></a>2. 数据元素</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。例如，学生记录就是一个数据元素，它有学号、姓名、性别等数据项组成。</p><h4 id="3-数据对象"><a href="#3-数据对象" class="headerlink" title="3. 数据对象"></a>3. 数据对象</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据对象是具有相同性质的数据元素的集合，是数据的一个子集。例如，整数数据对象是集合 N = {0,1,2,…}.</p><h4 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h4><pre><code>数据类型是一个值的集合和定义在此集合上的一组操作的总称。</code></pre><p>1）原子类型。其值不可再分的数据类型。</p><p>2）结构类型。其值可以再分解为若干成分（分量）的数据类型</p><p>3）抽象数据类型。抽象数据组织及与之相关的操作。</p><h4 id="5-数据结构"><a href="#5-数据结构" class="headerlink" title="5. 数据结构"></a>5. 数据结构</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据结构是相互之间存在的一种或多种特定关系的数据元素的集合。在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构(Structure)。数据结构包括三方面的内容:逻辑结构，存储结构和数据的运算。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的的存储结构。  </p><h3 id="1-1-2-数据结构三要素"><a href="#1-1-2-数据结构三要素" class="headerlink" title="1.1.2 数据结构三要素"></a>1.1.2 数据结构三要素</h3><h4 id="1-数据结构的逻辑结构"><a href="#1-数据结构的逻辑结构" class="headerlink" title="1.数据结构的逻辑结构"></a>1.数据结构的逻辑结构</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据存储无关，是独立于计算机的。数据的逻辑结构分为线性结构和非线性结构；集合、树和图是典型的的非线性结构。数数据的逻辑结构分类如图1.1所示。<br><img src="https://wx2.sbimg.cn/2020/04/27/QQ20200427152339.png" srcset="/img/loading.gif" alt="avatar"></p><p>集合。结构中的数据元素之间除“同属一个集合外”，别无其他关系，如图1.2(a)所示。</p><p>线性结构。结构中的数据元素之间只存在一对一的关系，如图1.2(b)所示。</p><p>树形结构。结构中的数据元素之间存在一对多的关系，如图1.2(c)所示。</p><p>图状结构或网状结构。结构中的数据元素之间存在多对多的关系,如图1.2(d)所示。</p><h4 id="2-数据的存储结构"><a href="#2-数据的存储结构" class="headerlink" title="2.数据的存储结构"></a>2.数据的存储结构</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储结构是指数据结构在计算机中的表示(又称映像)，也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是用计算机实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有顺序存储、链式储存、索引存储和散列存储。<img src="https://wx2.sbimg.cn/2020/04/27/001.png" srcset="/img/loading.gif" alt="001.png"></p><p>l ）顺序存储。把逻辑上相邻 的元素存储在物理位置上也相邻的存储单元中，元素之间的关<br>系由存储单元的邻接关系来体现。其优点是可以实现随机存取，每个元素占用最少的存<br>储空间 ： 缺点是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</p><p>2 ）链式存储。不要求逻辑上相邻 的 元素在物理位置上也相邻，借助指示元素存储地址的指<br>针来表示元素之间的逻辑关系 。其优点是不会出现碎片现象，能充分利用所有存储单元 ；<br>缺点是每个元素因存储指针而占用额外的存储空间，且只能实现顺序存取。</p><p>3 ）索 引 存储 。在存储元素信息的同时 ， 还建立附加的索引表。索引表中的每项称为索 引 项，<br>索引项的一般形式是（关键字，地址）。其优点是检索速度快：缺点是附加的索引表额外<br>占用存储空间。另外，增加和删除数据时也要修改索引表 ， 因而会花费较多的时间。</p><p>4 ）散列存储。根据元素的关键字直接计算出该元素的存储地址，又称哈希（ Hash ）存储 。<br>其优点是检索、增加和m川除结点的操作都很快 ： 缺点是若散列函数不好， 则可能出现元<br>素存储单元的冲突，而解决冲突会增加时间和空间开销。</p><h4 id="3-数据的运算"><a href="#3-数据的运算" class="headerlink" title="3. 数据的运算"></a>3. 数据的运算</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功<br>能：运算的实现是针对存储结构的，指出运算的具体操作步骤 。</p><h2 id="1-2-算法和算法评价"><a href="#1-2-算法和算法评价" class="headerlink" title="1.2 算法和算法评价"></a>1.2 算法和算法评价</h2><h3 id="1-2-1-算法的基本概念"><a href="#1-2-1-算法的基本概念" class="headerlink" title="1.2.1 算法的基本概念"></a>1.2.1 算法的基本概念</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;算法 （ Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列， 其中的每条指令表示一个或多个操作。此外，一个算法还具有下列 5 个重要特性 ：</p><p>1）有穷性。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成 。</p><p>2）确定性 。算法，中匈条指令必须有确切的含义 ， 对于相同的输入只能得出相同的输出 。</p><p>3）可行性 。算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现 。</p><p>4） 输入 。 一个算法有零个或多个输入，这些输入取 自于某个特定的对象的集合 。</p><p>5）输出 。一个算法有一个或多个输出，这些输 出 是与输入有着某种特定关系的量。</p><p>通常，设计一个“好”的算法应考虑达到以下目标：</p><p>1） 正确性 。算法应能够正确地解决求解问题 。</p><p>2）可读性 。算法应具有良好的可读性，以帮助人们 理解。</p><p>3）健壮性 。输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</p><p>4）效率与低存储量需求 。效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关 。</p><h3 id="1-2-2-算法效率的度量"><a href="#1-2-2-算法效率的度量" class="headerlink" title="1.2.2 算法效率的度量"></a>1.2.2 算法效率的度量</h3><pre><code>算法效率的度量是通过时间复杂度和空间复杂度来描述的。</code></pre><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构 考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/26/hello-world/"/>
    <url>/2020/04/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
